{{#def.className}}
{{#def.idlType}}
{{#def.extractV8Value}}
{{#def.dictionary}}
{{#def.interface}}
{{#def.enum}}

{{
var dictionaryClassName = it.name;
var foreignTypeList = [];
var guardName = classNameToGuardName(it.name);

var extractAllReferenceInterfaceTypeForDictionary = function (dic, refTypeMap) {
  var interfaceArray = [];
  dic.members.forEach(member => {
    if (member.type == 'field' && isInterface(member.idlType, refTypeMap)) {
      interfaceArray.push(member.idlType.idlType);
    }
  });
  return interfaceArray;
};

var extractAllReferenceDictionaryTypeForDictionary = function (dic, refTypeMap) {
  var dictionaryArray = [];
  dic.members.forEach(member => {
    if (member.type == 'field' && isDictionary(member.idlType, refTypeMap)) {
      dictionaryArray.push(member.idlType.idlType);
    }
  });
  return dictionaryArray;
};


var allForeignInterfaceTypes = extractAllReferenceInterfaceTypeForDictionary(it, it.refTypeMap);
var allForeignDictionaryTypes = extractAllReferenceDictionaryTypeForDictionary(it, it.refTypeMap);
}}


#ifndef {{=guardName}}
#define {{=guardName}}

#include "gen/generator_helper.h"
#include "gen/widl_dictionary_helper.h"

#include <string>

{{~allForeignInterfaceTypes :p:i}}
#include "{{=classNameToFileName(p)}}.h"
#include "gen/nan__{{=classNameToFileName(p)}}.h"
{{~}}

{{~allForeignDictionaryTypes :p:i}}
#include "gen/{{=classNameToFileName(p)}}.h"
{{~}}

class {{=dictionaryClassName}} : public WIDLDictionaryBase {
 public:
  {{=dictionaryClassName}}() {}

  {{=dictionaryClassName}}(v8::Local<v8::Object> source) : WIDLDictionaryBase(source) {}

  ~{{=dictionaryClassName}}() {}

  explicit operator v8::Local<v8::Object> () const {
    return GetObject();
  }

  static bool RequiredMemberCheck(v8::Local<v8::Object> source) {
    {{=dictionaryClassName}} temp(source);
{{
var requiredMembers = [];
it.members.forEach(member => {
  if (member.type === 'field' && member.required) {
    requiredMembers.push('"' + member.name + '"');
  }
});
var requiredMembersStr = '{' + requiredMembers.join(', ') + '}';
}}
    const char* REQUIRED_MEMBERS[] = {{=requiredMembersStr}};
    for ( int i = 0 ; i < {{=requiredMembers.length}} ; ++ i ) {
      if (!temp.IsMemberPresent(REQUIRED_MEMBERS[i])) {
        return false;
      }
    }
    return true;
  }


{{~it.members :p:i}}

{{
var memberName = p.name;
var memberType = idlType2CxxType(p.idlType, it.refTypeMap);
var extraMacroType = convertIDLType2ExtractMacro(p.idlType, it.refTypeMap);
}}

  bool has_{{=memberName}}() const {return IsMemberPresent("{{=memberName}}"); }

{{? p.type === 'field' && isNonStringPrimitiveType(p.idlType) && !isArray(p.idlType) }}
  {{=memberType}} get_{{=memberName}}() const {return EXTRACT_v8_{{=extraMacroType}}(GetMember("{{=memberName}}")); }
  void set_{{=memberName}}(const {{=memberType}}& value) {SetMemberT("{{=memberName}}", value); }

{{?? p.type === 'field' && isString(p.idlType) && !isArray(p.idlType)}}
  {{=memberType}} get_{{=memberName}}() const {return EXTRACT_v8_{{=extraMacroType}}(GetMember("{{=memberName}}")); }
  void set_{{=memberName}}(const {{=memberType}}& value) {SetMember("{{=memberName}}", value); }

{{?? p.type === 'field' && isArray(p.idlType) }}
  {{=memberType}} get_{{=memberName}}() const {return EXTRACT_v8_{{=extraMacroType}}(GetMember("{{=memberName}}")); }
  void set_{{=memberName}}(const {{=memberType}}& value) {SetMember("{{=memberName}}", value); }

{{?? p.type === 'field' && isInterface(p.idlType, it.refTypeMap)}}

{{var interfaceType = p.idlType.idlType;}}

  {{=interfaceType}} get_{{=memberName}}() const {
    auto value = GetMember("{{=memberName}}");
    auto nan_wrapper_obj = Nan::ObjectWrap::Unwrap<Nan{{=interfaceType}}>(value->ToObject());
    return *nan_wrapper_obj->Get{{=interfaceType}}Impl();
  }

  void set_{{=memberName}}(const {{=interfaceType}}& value) {
    auto obj = Nan{{=interfaceType}}::NewInstance();
    auto nan_wrapper_obj = Nan::ObjectWrap::Unwrap<Nan{{=interfaceType}}>(obj);
    nan_wrapper_obj->Copy{{=interfaceType}}Impl(value);
    SetMember("{{=memberName}}", obj);
  }
{{?? p.type === 'field' && (isDictionary(p.idlType, it.refTypeMap))}}

{{var dictionaryType = p.idlType.idlType;}}

  {{=dictionaryType}} get_{{=memberName}}() const {
    auto value = GetMember("{{=memberName}}");
    return value->ToObject();
  }

  void set_{{=memberName}}(const {{=dictionaryType}}& value) {
    SetMember("{{=memberName}}", value.GetObject());
  }

{{?? p.type === 'field' && (isEnumType(p.idlType, it.refTypeMap)) }}

  std::string get_{{=memberName}}() const {return EXTRACT_v8_string(GetMember("{{=memberName}}")); }
  void set_{{=memberName}}(const std::string& value) { SetMember("{{=memberName}}", value); }


{{?}}

{{~}}


};


{{
var internalPrefix = 'Dictionary';
var internalDictionaryClassName = internalPrefix + dictionaryClassName;
}}
//
// The pure C++ equivalent class of JavaScript dictionary {{=dictionaryClassName}}
//  There is no v8::xxx involved (thread friendly)
//
//  Warning: JavaScript array member(s) in dictionary is not supported yet
//
class {{=internalDictionaryClassName}} {
 public:
  {{=internalDictionaryClassName}} () {
    Reset();
  }

  {{=internalDictionaryClassName}} (const {{=dictionaryClassName}}& dic) {
    ImportFrom(dic);
  }

  {{=internalDictionaryClassName}} (const {{=internalDictionaryClassName}}& rhs) {
    CopyFrom(rhs);
  }

  {{=internalDictionaryClassName}}& operator = (const {{=internalDictionaryClassName}}& rhs) {
    CopyFrom(rhs);
    return *this;
  }

  void Reset() {
{{~it.members :p:i}}
{{var memberName = 'member_' + p.name; var hasMemberName = 'has_' + memberName; }}
    {{=hasMemberName}} = false;
{{~}}
  }

  // Only overwritten by the existing members of rhs
  void IncrementallyCopyFrom(const {{=internalDictionaryClassName}}& rhs) {
    if (this != &rhs) {
{{~it.members :p:i}}
{{
var memberName = 'member_' + p.name; var hasMemberName = 'has_' + memberName;
var memberType = idlType2CxxType(p.idlType, it.refTypeMap);
}}
      if (rhs.{{=hasMemberName}}) {
{{? p.type === 'field' && isArray(p.idlType) }}
        // TODO: Copy rhs.{{=memberName}};
{{?? true}}
        {{=hasMemberName}} = rhs.{{=hasMemberName}};
        {{=memberName}} = rhs.{{=memberName}}; {{?}}
      }
{{~}}
    }
  }

  void CopyFrom(const {{=internalDictionaryClassName}}& rhs) {
    if (this != &rhs) {
{{~it.members :p:i}}
{{
var memberName = 'member_' + p.name; var hasMemberName = 'has_' + memberName;
var memberType = idlType2CxxType(p.idlType, it.refTypeMap);
}}
      {{=hasMemberName}} = rhs.{{=hasMemberName}};
      if (rhs.{{=hasMemberName}}) {
{{? p.type === 'field' && isArray(p.idlType) }}
        // TODO: Copy rhs.{{=memberName}};
{{?? true}}
        {{=memberName}} = rhs.{{=memberName}}; {{?}}
      }
{{~}}
    }
  }

  void ImportFrom (const {{=dictionaryClassName}}& dic) {
    Reset();

{{~it.members :p:i}}
{{
var memberName = 'member_' + p.name; var hasMemberName = 'has_' + memberName;
var rawMembername = p.name;
var memberType = idlType2CxxType(p.idlType, it.refTypeMap);
}}
    {{=hasMemberName}} = dic.has_{{=rawMembername}}();
    if ({{=hasMemberName}}) {
{{? p.type === 'field' && isArray(p.idlType) }}
      // TODO: Copy dic.get_{{=rawMembername}}();
{{?? p.type === 'field' && (isDictionary(p.idlType, it.refTypeMap))}}
{{var dictionaryType = p.idlType.idlType;}}
      {{=memberName}} = dic.get_{{=rawMembername}}();
{{?? true}}
      {{=memberName}} = dic.get_{{=rawMembername}}();{{?}}
    }
{{~}}

  }

  void ExportTo ({{=dictionaryClassName}}& dic) const {
{{~it.members :p:i}}
{{
var memberName = 'member_' + p.name; var hasMemberName = 'has_' + memberName;
var rawMembername = p.name;
var memberType = idlType2CxxType(p.idlType, it.refTypeMap);
}}
    if ({{=hasMemberName}}) {
{{? p.type === 'field' && isArray(p.idlType) }}
      // TODO: Copy dic.get_{{=rawMembername}}();
{{?? p.type === 'field' && (isDictionary(p.idlType, it.refTypeMap))}}
{{var dictionaryType = p.idlType.idlType;}}
      dic.set_{{=rawMembername}}({{=memberName}}.Exported());
{{?? true}}
      dic.set_{{=rawMembername}}({{=memberName}});{{?}}
    } else {
      dic.DeleteMember("{{=rawMembername}}");
    }
{{~}}
  }

  {{=dictionaryClassName}} Exported() const {
    {{=dictionaryClassName}} dic;
    ExportTo(dic);
    return dic;
  }


 public:

{{~it.members :p:i}}
{{
var memberName = 'member_' + p.name; var hasMemberName = 'has_' + memberName;
var memberType = idlType2CxxType(p.idlType, it.refTypeMap);
}}
  bool {{=hasMemberName}};

{{? p.type === 'field' && isNonStringPrimitiveType(p.idlType) && !isArray(p.idlType) }}
  {{=memberType}} {{=memberName}};
{{?? p.type === 'field' && isString(p.idlType) && !isArray(p.idlType)}}
  {{=memberType}} {{=memberName}};
{{?? p.type === 'field' && isArray(p.idlType) }}
  // TODO: Fina a way to support this.
  //       Note: there is no 1:1 equivalent C++ type of JavaScript array yet
  //{{=memberType}}[] {{=memberName}};
{{?? p.type === 'field' && isInterface(p.idlType, it.refTypeMap)}}
{{var interfaceType = p.idlType.idlType;}}
  {{=interfaceType}} {{=memberName}};
{{?? p.type === 'field' && (isDictionary(p.idlType, it.refTypeMap))}}
{{var dictionaryType = p.idlType.idlType;}}
  {{=internalPrefix}}{{=dictionaryType}} {{=memberName}};
{{?? p.type === 'field' && (isEnumType(p.idlType, it.refTypeMap)) }}
  std::string {{=memberName}};
{{?}}

{{~}}

};

#endif  // {{=guardName}}
