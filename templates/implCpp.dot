// To add your copyright and license header

{{#def.callback}}
{{#def.argument}}
{{#def.className}}
{{#def.extractConstructors}}
{{#def.toString}}

{{
var className = it.name;
var headerFileName = classNameToFileName(className);
var constructors = extractConstructors(it);
}}

#include "{{=headerFileName}}.h"

{{#def.implCppPropertyVarsDef}}

{{? constructors.length }}

{{~ constructors :p:i }}
{{=className}}::{{=className}}({{=generateParameterList(p, it.refTypeMap)}}) {
  // TODO(widl-nan): init your members
}
{{~}}

{{?? true}}
{{=className}}::{{=className}}() {
  // TODO(widl-nan): init your members
}
{{?}}

{{=className}}::~{{=className}}() {
  // TODO(widl-nan): do cleanup if necessary
}

{{=className}}& {{=className}}::operator = (const {{=className}}& rhs) {
  if (&rhs != this) {
    // TODO(widl-nan): copy members from rhs
  }
  return *this;
}

{{#def.implCppMethod}}

{{? hasStringifier(it) }}
{{? hasMultipleStringifier(it) }}
// Multiple `stringifier` found in Web IDL definition
// TODO: define the desired behavior in your source code
std::string {{=className}}::ToString() const {
}
{{?? isValidAttributeStringifier(it) }}
  // Note: stringifier will use get_{{=getStringifierMember(it).name}}() function
{{?? isValidOperationStringifier(it) }}
std::string {{=className}}::ToString() const {
}
{{?}}
{{?}}
