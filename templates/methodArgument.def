{{#def.idlType2CxxConversion}}
{{#def.callback}}

{{

var generateParameterList = function (method, refTypeMap){
  var callback = extractAllCallbackMethod(it);

  var returnList = '';
  if ( method.arguments ) {
    method.arguments.forEach((arg, idx) => {
      if (isCallback(arg.idlType, callback)) {
        var helperClassName = getCallbackHelperClassName(arg.idlType.idlType);
        returnList += helperClassName;
        returnList += '* ';
      } else {
        returnList += 'const ';
        returnList += ConvertIDLType2Cxx(arg.idlType, refTypeMap);
        returnList += '& ';
      }
      returnList += arg.name;
      if (idx < method.arguments.length-1) {
        returnList += ', ';
      }
    });
  }
  return returnList;
};

var generateArgvList = function(method, padding) {
  padding = padding || '';
  var returnList = [];
  if (method.arguments) {
    method.arguments.forEach((arg, idx) => {
      var str = 'Nan::New(';
      str += arg.name;
      str += ')';
      if (isString(arg.idlType, it.refTypeMap)) {
        str += '.ToLocalChecked()';
      }
      returnList.push(str);
    });
  }
  return returnList.join(',\n' + padding);
};

var generateArgumentList = function (method){
  var returnList = '';
  if ( method.arguments ) {
    method.arguments.forEach((arg, idx) => {
      returnList += arg.name;
      if (idx < method.arguments.length-1) {
        returnList += ', ';
      }
    });
  }
  return returnList;
};

var generateInitList = function (method){
  var returnList = '';
  if ( method.arguments ) {
    returnList = ': ';
    method.arguments.forEach((arg, idx) => {
      returnList += arg.name;
      returnList += '_(';
      returnList += arg.name;
      returnList += ')';
      if (idx < method.arguments.length-1) {
        returnList += ', ';
      }
    });
  }
  return returnList;
};

}}
