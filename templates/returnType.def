{{#def.idlType}}
{{#def.interface}}

{{

var getToLocalCheckedString = function (idlType, refTypeMap) {
  var isString = false;
  var type = idlType.idlType;
  if (type === "String" || type === "DOMString") {
    isString = true;
  } else {
    /* If it's a referenced enum type, then use std::string */
    if (refTypeMap && refTypeMap[type]) {
      var refType = refTypeMap[type];
      if (refType.type === 'enum') {
        isString = true;
      }
    }
  }

  return isString ? '.ToLocalChecked()' : '';
};

var idlType2CxxReturnType = function (idlType, refTypeMap) {
  var type = idlType2CxxType(idlType, refTypeMap);
  if (isInterface(idlType, refTypeMap)) {
    type += '*';
  }
  if (isArray(idlType)) {
    type = 'ArrayHelper';
  }
  return type;
};

}}