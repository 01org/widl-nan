#ifndef _WIDL_DICTIONARY_BASE_H_
#define _WIDL_DICTIONARY_BASE_H_

#include <node.h>
#include <v8.h>
#include <nan.h>

#include <string>

class WIDLDictionaryBase {
 public:
  explicit WIDLDictionaryBase(v8::Local<v8::Object> source) : v8obj_(source) {
  }

  WIDLDictionaryBase() {
    v8obj_ = v8::Object::New(v8::Isolate::GetCurrent());
  }

  ~WIDLDictionaryBase() {}

  v8::Local<v8::Value> GetMember(const char* name) const {
    return v8obj_->Get(Nan::New(name).ToLocalChecked());
  }

  v8::Local<v8::Value> GetMember(const std::string& name) const {
    return GetMember(name.c_str());
  }

  void SetMemberUndefined(const char* name) {
    v8obj_->Set(Nan::New(name).ToLocalChecked(), Nan::Undefined());
  }

  void DeleteMember(const char* name) {
    v8obj_->Delete(Nan::New(name).ToLocalChecked());
  }

  void SetMember(const char* name, const char* value) {
    v8obj_->Set(Nan::New(name).ToLocalChecked(), Nan::New(value).ToLocalChecked());
  }

  void SetMember(const char* name, v8::Local<v8::Value> value) {
    v8obj_->Set(Nan::New(name).ToLocalChecked(), value);
  }

  void SetMember(const char* name, const std::string& value) {
    v8obj_->Set(Nan::New(name).ToLocalChecked(), Nan::New(value.c_str()).ToLocalChecked());
  }

  template <typename T>
  void SetMemberT(const char* name, const T& value) {
    v8obj_->Set(Nan::New(name).ToLocalChecked(), Nan::New(value));
  }

  bool IsMemberPresent(const char* name) const {
    v8::Local<v8::Value> v = v8obj_->Get(Nan::New(name).ToLocalChecked());
    return !(v->IsUndefined() || v->IsNull());
  }

  bool IsMemberPresent(const std::string& name) const {
    return IsMemberPresent(name.c_str());
  }

  v8::Local<v8::Object> GetObject() const {
    return v8obj_;
  }

protected:
  mutable v8::Local<v8::Object> v8obj_;
};

#endif  // _WIDL_DICTIONARY_BASE_H_
