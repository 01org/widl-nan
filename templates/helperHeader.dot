#ifndef _GENERATOR_HELPER_H_
#define _GENERATOR_HELPER_H_
#include <node.h>
#include <nan.h>
#include <memory>
#include <limits>

#define EXTRACT_v8_String(x) EXTRACT_v8_string(x)
#define EXTRACT_v8_float(x) EXTRACT_v8_double(x)

struct ArrayBuffer {
  char* data;
  uint32_t size;
};

inline v8::Local<v8::Array> EXTRACT_v8_array(v8::Local<v8::Value> value) {
  if (value->IsArray()) {
  } else {
    // throw?
    printf("value is not array\n");
  }
  return v8::Local<v8::Array>::Cast(value);
}

inline v8::Local<v8::Object> EXTRACT_v8_object(v8::Local<v8::Value> value) {
  if (value->IsObject()) {
  } else {
    // throw ...
  }
  return value->ToObject();
}

inline std::string EXTRACT_v8_string(v8::Local<v8::Value> value, const std::string& defaultValue = std::string()) {
  auto retValue = defaultValue;
  if (value->IsString()) {
    retValue = std::string(*v8::String::Utf8Value(value));
  } else if (value->IsUndefined()) {
    // Using defaultValue already
  } else {
    // throw ...
  }
  return retValue;
}

inline double EXTRACT_v8_double(v8::Local<v8::Value> value, double defaultValue = std::numeric_limits<double>::quiet_NaN()) {
  auto retValue = defaultValue;
  if (value->IsNumber()) {
    retValue =  value->NumberValue();
  } else if (value->IsUndefined()) {
    // Using defaultValue already
  } else {
    // throw ...
  }
  return retValue;
}

//for byte type
inline int8_t EXTRACT_v8_int8_t(v8::Local<v8::Value> value, int8_t defaultValue = 0) {
  auto retValue = defaultValue;
  if (value->IsNumber()) {
    retValue =  value->NumberValue();
  } else {
    // throw ...
  }
  return retValue;
}

//for octet type
inline uint8_t EXTRACT_v8_uint8_t(v8::Local<v8::Value> value, uint8_t defaultValue = 0) {
  auto retValue = defaultValue;
  if (value->IsNumber()) {
    retValue =  value->NumberValue();
  } else {
    // throw ...
  }
  return retValue;
}

//for short type
inline int16_t EXTRACT_v8_int16_t(v8::Local<v8::Value> value, int16_t defaultValue = 0) {
  auto retValue = defaultValue;
  if (value->IsNumber()) {
    retValue =  value->NumberValue();
  } else {
    // throw ...
  }
  return retValue;
}

//for unsigned short type
inline uint16_t EXTRACT_v8_uint16_t(v8::Local<v8::Value> value, uint16_t defaultValue = 0) {
  auto retValue = defaultValue;
  if (value->IsNumber()) {
    retValue =  value->NumberValue();
  } else {
    // throw ...
  }
  return retValue;
}

//for long type
inline int32_t EXTRACT_v8_int32_t(v8::Local<v8::Value> value, int32_t defaultValue = 0) {
  auto retValue = defaultValue;
  if (value->IsNumber()) {
    retValue =  value->NumberValue();
  } else {
    // throw ...
  }
  return retValue;
}

//for unsigned long type
inline uint32_t EXTRACT_v8_uint32_t(v8::Local<v8::Value> value, uint32_t defaultValue = 0) {
  auto retValue = defaultValue;
  if (value->IsNumber()) {
    retValue =  value->NumberValue();
  } else {
    // throw ...
  }
  return retValue;
}

//for long long type
inline int64_t EXTRACT_v8_int64_t(v8::Local<v8::Value> value, int64_t defaultValue = 0) {
  auto retValue = defaultValue;
  if (value->IsNumber()) {
    retValue =  value->NumberValue();
  } else {
    // throw ...
  }
  return retValue;
}

//for unsigned long long
inline uint64_t EXTRACT_v8_uint64_t(v8::Local<v8::Value> value, uint64_t defaultValue = 0) {
  auto retValue = defaultValue;
  if (value->IsNumber()) {
    retValue =  value->NumberValue();
  } else {
    // throw ...
  }
  return retValue;
}

inline bool EXTRACT_v8_bool(v8::Local<v8::Value> value, bool defaultValue = false) {
  auto retValue = defaultValue;
  if (value->IsBoolean()) {
    retValue =  value->BooleanValue();
  } else {
    // throw ...
  }
  return retValue;
}

inline v8::Local<v8::Function> EXTRACT_v8_function(v8::Local<v8::Value> value, int8_t defaultValue = 0) {
  if (value->IsFunction()) {
  } else {
    // throw ...
  }
  return v8::Local<v8::Function>::Cast(value);
}

inline ArrayBuffer EXTRACT_v8_ArrayBuffer(v8::Local<v8::Value> value) {
  if (value->IsObject()) {
  } else {
    // throw ...
  }

  ArrayBuffer arrayBuffer;
  arrayBuffer.data = node::Buffer::Data(value->ToObject());
  arrayBuffer.size = node::Buffer::Length(value->ToObject());
  return arrayBuffer;
}

// Helper: to deal with const members in interface of *.idl file
//
// e.g.
//
// interface foo {
//   const long log_detail = 5;
//   const long log_... = .;
// };
//
#define _FORCE_SET_ENUM(obj, name, value, type) \
  obj->ForceSet(Nan::New(#name).ToLocalChecked(), \
  Nan::New(static_cast<type>(value)), \
  static_cast<v8::PropertyAttribute>(v8::ReadOnly | v8::DontDelete));

inline bool IsEnumValueValidImpl(const std::string& param, const char* LIST[], int size) {
  auto found = false;
  for (int i = 0 ; i < size ; ++ i) {
    if (param == LIST[i]) {
      found = true;
      break;
    }
  }
  return found;
}

inline void ThrowIfEnumValueNotValidImpl(const std::string& param, const char* LIST[], int size,
    const char* paramName, const char* paramTypeName) {
  auto found = IsEnumValueValidImpl(param, LIST, size);
  if (! found) {
    std::string err = "Illegal argument: ";
    err += paramTypeName;
    err += " ";
    err += paramName;
    err += " == ";
    err += "'";
    err += param;
    err += "'";
    Nan::ThrowTypeError(err.c_str());
  }
}

#define ThrowIfEnumValueNotValid(param, LIST, paramName, paramTypeName) \
  ThrowIfEnumValueNotValidImpl(param, LIST, sizeof(LIST)/sizeof(const char*), #paramName, #paramTypeName)

#define IsEnumValueValid(param, LIST) \
  (IsEnumValueValidImpl(param, LIST, sizeof(LIST)/sizeof(const char*)))


class CallbackHelperBase {
 public:
  CallbackHelperBase() {
  }

  virtual ~CallbackHelperBase() {
    this->Reset();
  }

  void Reset(v8::Local<v8::Function> js_func, v8::Local<v8::Object> js_this) {
    v8_function_.Reset(js_func);
    v8_this_.Reset(js_this);
  }

  void Reset() {
    v8_function_.Reset();
    v8_this_.Reset();
  }

 protected:
  Nan::Persistent<v8::Function> v8_function_;
  Nan::Persistent<v8::Object> v8_this_;
};

#endif // _GENERATOR_HELPER_H_
