#ifndef _GENERATOR_HELPER_H_
#define _GENERATOR_HELPER_H_

#define EXTRACT_v8_String(x) EXTRACT_v8_string(x)
#define EXTRACT_v8_float(x) EXTRACT_v8_double(x)

inline std::string EXTRACT_v8_string(v8::Local<v8::Value> value) {
  if (value->IsString()) {
  } else {
    // throw ...
  }
  return std::string(*v8::String::Utf8Value(value));
}

inline double EXTRACT_v8_double(v8::Local<v8::Value> value) {
  if (value->IsNumber()) {
  } else {
    // throw ...
  }
  return value->NumberValue();
}

inline short EXTRACT_v8_short(v8::Local<v8::Value> value) {
  if (value->IsNumber()) {
  } else {
    // throw ...
  }
  return value->NumberValue();
}

// Helper: to deal with const members in interface of *.idl file
//
// e.g.
//
// interface foo {
//   const long log_detail = 5;
//   const long log_... = .;
// };
//
#define _FORCE_SET_ENUM(obj, name, value, type) \
  obj->ForceSet(Nan::New(#name).ToLocalChecked(), \
  Nan::New(static_cast<type>(value)), \
  static_cast<v8::PropertyAttribute>(v8::ReadOnly | v8::DontDelete));

inline bool IsEnumValueValidImpl(const std::string& param, const char* LIST[], int size) {
  auto found = false;
  for (int i = 0 ; i < size ; ++ i) {
    if (param == LIST[i]) {
      found = true;
      break;
    }
  }
  return found;
}

inline void ThrowIfEnumValueNotValidImpl(const std::string& param, const char* LIST[], int size,
    const char* paramName, const char* paramTypeName) {
  auto found = IsEnumValueValidImpl(param, LIST, size);
  if (! found) {
    std::string err = "Illegal argument: ";
    err += paramTypeName;
    err += " ";
    err += paramName;
    err += " == ";
    err += "'";
    err += param;
    err += "'";
    Nan::ThrowTypeError(err.c_str());
  }
}

#define ThrowIfEnumValueNotValid(param, LIST, paramName, paramTypeName) \
  ThrowIfEnumValueNotValidImpl(param, LIST, sizeof(LIST)/sizeof(const char*), #paramName, #paramTypeName)

#define IsEnumValueValid(param, LIST) \
  (IsEnumValueValidImpl(param, LIST, sizeof(LIST)/sizeof(const char*)))

#endif // _GENERATOR_HELPER_H_
