{{#def.impl}}

{{ var guardName = it.name.toUpperCase(); }}
{{ var headerFileName = it.name.toLowerCase(); }}
{{
  var constCounter = 0;
  it.members.forEach(mem => {
    if (mem.type == 'const') {
      constCounter ++;
    }
  });
  var useImpl = (constCounter < it.members.length);
  var implClassName = it.name;
  var nanClassName = generateNanClassName(it);
}}
#ifndef _NAN{{=guardName}}_H_
#define _NAN{{=guardName}}_H_
{{? useImpl}}
#include "{{=headerFileName}}.h"
{{?}}
#include <node.h>
#include <nan.h>

class {{=nanClassName}} : public Nan::ObjectWrap {
 public:
  static void Init(v8::Local<v8::Object> exports);
  static v8::Local<v8::Object> NewInstance(int argc = 0, v8::Local<v8::Value> argv[] = nullptr);

{{? useImpl}}
  {{=implClassName}}* {{=generateGetImplMethodName(implClassName)}}() { return impl_; }
  const {{=implClassName}}* {{=generateGetImplMethodName(implClassName)}}() const { return impl_; }
  void {{=generateSetImplMethodName(implClassName)}}({{=implClassName}}* newObj) { impl_ = newObj; }
  void {{=generateCopyImplMethodName(implClassName)}}(const {{=implClassName}}& obj) { *impl_ = obj; }
{{?}}

 private:
  explicit {{=nanClassName}}();
  ~{{=nanClassName}}();

{{#def.nanCxxHeaderProperty}}
{{#def.nanCxxHeaderMethod}}

  static Nan::Persistent<v8::Function> constructor;

{{? useImpl}}
 private:
  {{=implClassName}}* impl_;
{{?}}

};

#endif // _NAN{{=guardName}}_H_
