{{#def.interface}}

{{
  var headerFileName = it.name.toLowerCase();

  var constCounter = 0;
  it.members.forEach(mem => {
    if (mem.type == 'const') {
      constCounter ++;
    }
  });
  var useImpl = (constCounter < it.members.length);

  var foreignInterfaces = extractAllReferenceInterfaceType(it, it.refTypeMap);
}}

#include "nan__{{=headerFileName}}.h"
#include "generator_helper.h"

{{~foreignInterfaces.interfaceArray :interface}}
{{? interface.name != it.name}}
#include "nan__{{=(interface.name.toLowerCase())}}.h"
{{?}}
{{~}}

Nan::Persistent<v8::Function> Nan{{=it.name}}::constructor;

{{? useImpl}}
Nan{{=it.name}}::Nan{{=it.name}}()
    : impl_(nullptr) {
}

Nan{{=it.name}}::~Nan{{=it.name}}() {
  delete impl_;
}
{{?? true}}
Nan{{=it.name}}::Nan{{=it.name}}() {
}

Nan{{=it.name}}::~Nan{{=it.name}}() {
}
{{?}}

void Nan{{=it.name}}::Init(v8::Local<v8::Object> exports) {
  Nan::HandleScope scope;

  // Prepare constructor template
  v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
  tpl->SetClassName(Nan::New("{{=it.name}}").ToLocalChecked());
  tpl->InstanceTemplate()->SetInternalFieldCount({{?useImpl}}1{{??true}}0{{?}});

{{#def.nanCxxImplMethodInitList}}

{{#def.nanCxxImplPropertyInitList}}

  auto function = tpl->GetFunction();

{{#def.nanCxxImplConstantInitList}}

  constructor.Reset(function);
  exports->Set(Nan::New("{{=it.name}}").ToLocalChecked(), tpl->GetFunction());
}

v8::Local<v8::Object> Nan{{=it.name}}::NewInstance(int argc, v8::Local<v8::Value> argv[])
{
  static v8::Local<v8::Value> emptyArgv[0] = {};

  if (argc == 0) {
    argv = emptyArgv;
  }

  v8::Local<v8::Function> cons = Nan::New<v8::Function>(Nan{{=it.name}}::constructor);
  v8::Local<v8::Context> context = v8::Isolate::GetCurrent()->GetCurrentContext();

  return cons->NewInstance(context, argc, argv).ToLocalChecked();
}

NAN_METHOD(Nan{{=it.name}}::New) {
  v8::Isolate* isolate = info.GetIsolate();

  if (info.IsConstructCall()) {

{{#def.extractConstructors}}
{{#def.argument}}

{{ var constructors = extractConstructors(it); }}

{{? constructors.length }}

    Nan{{=it.name}}* obj = new Nan{{=it.name}}();

{{~ constructors :p:i }}
    {{?i>0}}else {{?}}if (info.Length() == {{?p.arguments}} {{=p.arguments.length}} {{??}} 0 {{?}}) {

{{#def.argumentList}}

      obj->impl_ = new {{=it.name}}({{=generateArgumentList(p)}});
    }
{{~}}
    else {
      Nan::ThrowTypeError("Illegal constructor");
    }

    obj->Wrap(info.This());
    info.GetReturnValue().Set(info.This());

{{?? true}}
    Nan::ThrowTypeError("Illegal constructor");
{{?}}

  } else {
    // Invoked as plain function `Nan{{=it.name}}()`, turn into construct call.
    const int argc = 0;
    v8::Local<v8::Value> argv[argc] = {};
    v8::Local<v8::Function> cons = Nan::New<v8::Function>(constructor);
    v8::Local<v8::Context> context = isolate->GetCurrentContext();
    v8::Local<v8::Object> instance = cons->NewInstance(context, argc, argv).ToLocalChecked();
    info.GetReturnValue().Set(instance);
  }
}

{{#def.nanCxxImplProperty}}

{{#def.nanCxxImplMethod}}
