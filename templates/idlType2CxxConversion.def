{{

var isPrimitiveType = function (idlType) {
  var type = idlType.idlType;
  return type === 'boolean'
      || type === 'byte'
      || type === 'octet'
      || type === 'short'
      || type === 'unsigned short'
      || type === 'long'
      || type === 'unsigned long'
      || type === 'long long'
      || type === 'unsigned long long'
      || type === 'float'
      || type === 'unrestricted float'
      || type === 'double'
      || type === 'unrestricted double'
      || type === 'DOMString'
      || type === 'String';
};

var ConvertIDLType2Cxx = function (idlType, refTypeMap) {
  var type = idlType.idlType;
  if (type === 'String' || type === 'DOMString') {
    type = 'std::string';
  } else if (type === 'boolean') {
    type = 'bool';
  } else if (typeof type === 'object' && idlType.generic === 'Promise') {
    type = 'v8::Handle<v8::Promise>';
  } else {
    /* If it's a referenced enum type, then use std::string */
    if (refTypeMap && refTypeMap[type]) {
      var refType = refTypeMap[type];
      if (refType.type === 'enum') {
        type = 'std::string';
      }
    }
  }
  return type;
};

var isString = function (idlType, refTypeMap) {
  return ConvertIDLType2Cxx(idlType, refTypeMap) === 'std::string';
};


}}
