// To add your copyright and license header

{{#def.callback}}
{{#def.argument}}
{{#def.className}}
{{#def.idlType}}
{{#def.interface}}

{{ var guardName = classNameToGuardName(it.name); }}

#ifndef _{{=guardName}}_H_
#define _{{=guardName}}_H_

#include <node.h>
#include <v8.h>

#include <string>

#include "gen/generator_helper.h"

{{
var callback = extractAllCallbackMethod(it);
var hasCallback = callback.methods.length > 0;

var foreignInterfaces = extractAllReferenceInterfaceType(it, it.refTypeMap);
var foreignDictionaries = extractAllReferenceDictionaryType(it, it.refTypeMap);
}}

{{~foreignInterfaces.interfaceArray :interface}}
{{? interface.name != it.name}}
#include "{{=classNameToFileName(interface.name)}}.h"
{{?}}
{{~}}

{{~foreignDictionaries.interfaceArray :dictionary}}
#include "gen/{{=classNameToFileName(dictionary.name)}}.h"
{{~}}

{{? hasCallback}}
{{~ callback.callbacksArray :p:i}}
{{var helperClassName = getCallbackHelperClassName(p.name);}}
class {{=helperClassName}}
    : public CallbackHelperBase {
 public:
  {{=helperClassName}}() {
  }

  virtual ~{{=helperClassName}}() {
  }

  {{
  var numArgs = p.arguments.length;
  var paramStr = generateParameterList(p, it.refTypeMap);
  }}

  void CallJavaScriptFunction({{=paramStr}}) {
    Nan::HandleScope scope;
    auto js_func = Nan::New<v8::Function>(v8_function_);
    auto js_this = Nan::New<v8::Object>(v8_this_);
    const int argc = {{=numArgs}};
    v8::Local<v8::Value> argv[argc] = {
      {{=generateArgvList(p, '      ')}}
    };
    auto ret_value = js_func->Call(js_this, argc, argv);
    if (ret_value->IsString()) {
      v8::String::Utf8Value value(ret_value);
      std::string str(*value);
      printf("String came from JavaScript: %s\n", str.c_str());
    }
  }
};
{{~}}
{{?}}

class {{=it.name}} {
 public:
{{#def.extractConstructors}}

{{ var constructors = extractConstructors(it); }}

{{? constructors.length }}

{{~ constructors :p:i }}
  {{ var paramStr = generateParameterList(p, it.refTypeMap); }}
  {{? paramStr === "" }}
  {{=it.name}}({{=paramStr}});
  {{??}}
  explicit {{=it.name}}({{=paramStr}});
  {{?}}
{{~}}

{{?? true}}
  {{=it.name}}();
{{?}}

  ~{{=it.name}}();

  {{=it.name}}& operator = (const {{=it.name}}& rhs);

 public:
{{#def.implHeaderProperty}}
{{#def.implHeaderStaticProperty}}

{{#def.implHeaderMethodDecl}}

  void SetJavaScriptThis(v8::Local<v8::Object> obj) {
    // Ignore this if you don't need it
    // Typical usage: emit an event on `obj`
  }

 private:
{{#def.implHeaderPropertyVars}}

{{? hasCallback}}
{{~ callback.callbacksArray :p:i}}
{{var helperClassName = getCallbackHelperClassName(p.name);}}
  // TODO(widl-nan): Use a collection if want to hold multiple callbacks
  std::shared_ptr<{{=helperClassName}}> {{=classNameToMemberName(helperClassName)}};
{{
 var paramStr = generateParameterList(p, it.refTypeMap);
 var argStr = generateArgumentList(p);
}}
  void Call{{=helperClassName}}({{=paramStr}}) {
    // TODO(widl-nan): Use a collection if want to hold multiple callbacks
    {{=classNameToMemberName(helperClassName)}}->CallJavaScriptFunction({{=argStr}});
  }
{{~}}
{{?}}

};

#endif  // _{{=guardName}}_H_
